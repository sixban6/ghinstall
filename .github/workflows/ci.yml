name: CI

on:
  push:
    tags: ['v*']
env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download
        
      - name: Verify dependencies
        run: go mod verify
        
      - name: Run tests
        run: go test -v -race -short ./...

  build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build CLI tool
        run: go build -o ghinstall-cli -ldflags="-s -w" ./cmd/ghinstall
        
      - name: Test CLI
        run: ./ghinstall-cli -version

  release:
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        arch: [amd64, arm64]
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build for linux-${{ matrix.arch }}
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -o "dist/ghinstall-linux-${{ matrix.arch }}" \
            -ldflags="-s -w -X main.appVersion=${{ github.ref_name }}" \
            ./cmd/ghinstall
          
      - name: Upload release binaries
        uses: actions/upload-artifact@v4
        with:
          name: ghinstall-linux-${{ matrix.arch }}
          path: dist/ghinstall-linux-${{ matrix.arch }}

  create-release:
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/ghinstall-*/ghinstall-*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}